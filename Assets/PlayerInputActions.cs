//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""GamePlay"",
            ""id"": ""e55f1629-5ba4-4293-8feb-072499ca73e3"",
            ""actions"": [
                {
                    ""name"": ""MoveBlockLeft"",
                    ""type"": ""Button"",
                    ""id"": ""fc1ecc82-0874-4307-95ac-0cd48f279878"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveBlockRight"",
                    ""type"": ""Button"",
                    ""id"": ""6cacadca-4a3f-434a-a4d9-6b06a3e410e7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateBlockLeft"",
                    ""type"": ""Button"",
                    ""id"": ""16ef6229-c6dd-40ff-8529-13b74f6b12a4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateBlockRight"",
                    ""type"": ""Button"",
                    ""id"": ""3424f826-44b7-4e9b-9aee-4b32cc225845"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DropBlockFast"",
                    ""type"": ""Button"",
                    ""id"": ""0afa0461-fe4a-49a9-8364-a2314fe167fd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""b4b62fae-0ebe-4782-81b5-e11471dc1708"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PauseGame"",
                    ""type"": ""Button"",
                    ""id"": ""a40264bb-2eb4-415c-a1fb-a7c150f61dc5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cheat"",
                    ""type"": ""Button"",
                    ""id"": ""26108753-1ce6-4428-b686-fca7c1d68a1f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Yes"",
                    ""type"": ""Button"",
                    ""id"": ""e51fe386-ec10-41f5-83d1-dadfcbda19c3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""No"",
                    ""type"": ""Button"",
                    ""id"": ""e4574a01-73f9-4e76-a19a-bcb39479c4b9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""8c82ee7d-54a2-4940-8bf5-c60644aa10ee"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bfb2b1c9-4ca5-43a3-9574-721f5f710702"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveBlockLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""83c822fc-8512-4903-9f7b-883b061c954d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveBlockRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""87cba523-da8c-4e15-b1f3-4fcb795c5dec"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateBlockLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d245b609-1957-411c-9f6c-1a5dc2f68065"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateBlockRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f998376c-641e-4aa3-b12a-55800c94b658"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DropBlockFast"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8b28753b-ac53-435d-9114-f6742fccb984"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1da417dc-7b89-469a-9e6d-e49955add588"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PauseGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3de38e2a-6cfb-4dbe-ae49-400e84183b63"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cheat"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b87c4732-31c1-4f3a-9a62-d1b156c96cbb"",
                    ""path"": ""<Keyboard>/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Yes"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""12b84dcd-bd29-4d3d-ae60-aad766fab06d"",
                    ""path"": ""<Keyboard>/n"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""No"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""b8ce710b-18f1-401e-978e-08a6c9162d1d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2a027811-3678-4c37-a1c3-dd0421309f11"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b9cd604b-7d7c-4dad-996a-c729d0c9ec8d"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""cfb45827-c2b9-4ae1-b207-acf281b9c11b"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""12f4b33f-51f9-4bf4-a0b1-177ba8455b38"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GamePlay
        m_GamePlay = asset.FindActionMap("GamePlay", throwIfNotFound: true);
        m_GamePlay_MoveBlockLeft = m_GamePlay.FindAction("MoveBlockLeft", throwIfNotFound: true);
        m_GamePlay_MoveBlockRight = m_GamePlay.FindAction("MoveBlockRight", throwIfNotFound: true);
        m_GamePlay_RotateBlockLeft = m_GamePlay.FindAction("RotateBlockLeft", throwIfNotFound: true);
        m_GamePlay_RotateBlockRight = m_GamePlay.FindAction("RotateBlockRight", throwIfNotFound: true);
        m_GamePlay_DropBlockFast = m_GamePlay.FindAction("DropBlockFast", throwIfNotFound: true);
        m_GamePlay_Jump = m_GamePlay.FindAction("Jump", throwIfNotFound: true);
        m_GamePlay_PauseGame = m_GamePlay.FindAction("PauseGame", throwIfNotFound: true);
        m_GamePlay_Cheat = m_GamePlay.FindAction("Cheat", throwIfNotFound: true);
        m_GamePlay_Yes = m_GamePlay.FindAction("Yes", throwIfNotFound: true);
        m_GamePlay_No = m_GamePlay.FindAction("No", throwIfNotFound: true);
        m_GamePlay_Move = m_GamePlay.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GamePlay
    private readonly InputActionMap m_GamePlay;
    private List<IGamePlayActions> m_GamePlayActionsCallbackInterfaces = new List<IGamePlayActions>();
    private readonly InputAction m_GamePlay_MoveBlockLeft;
    private readonly InputAction m_GamePlay_MoveBlockRight;
    private readonly InputAction m_GamePlay_RotateBlockLeft;
    private readonly InputAction m_GamePlay_RotateBlockRight;
    private readonly InputAction m_GamePlay_DropBlockFast;
    private readonly InputAction m_GamePlay_Jump;
    private readonly InputAction m_GamePlay_PauseGame;
    private readonly InputAction m_GamePlay_Cheat;
    private readonly InputAction m_GamePlay_Yes;
    private readonly InputAction m_GamePlay_No;
    private readonly InputAction m_GamePlay_Move;
    public struct GamePlayActions
    {
        private @PlayerInputActions m_Wrapper;
        public GamePlayActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveBlockLeft => m_Wrapper.m_GamePlay_MoveBlockLeft;
        public InputAction @MoveBlockRight => m_Wrapper.m_GamePlay_MoveBlockRight;
        public InputAction @RotateBlockLeft => m_Wrapper.m_GamePlay_RotateBlockLeft;
        public InputAction @RotateBlockRight => m_Wrapper.m_GamePlay_RotateBlockRight;
        public InputAction @DropBlockFast => m_Wrapper.m_GamePlay_DropBlockFast;
        public InputAction @Jump => m_Wrapper.m_GamePlay_Jump;
        public InputAction @PauseGame => m_Wrapper.m_GamePlay_PauseGame;
        public InputAction @Cheat => m_Wrapper.m_GamePlay_Cheat;
        public InputAction @Yes => m_Wrapper.m_GamePlay_Yes;
        public InputAction @No => m_Wrapper.m_GamePlay_No;
        public InputAction @Move => m_Wrapper.m_GamePlay_Move;
        public InputActionMap Get() { return m_Wrapper.m_GamePlay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GamePlayActions set) { return set.Get(); }
        public void AddCallbacks(IGamePlayActions instance)
        {
            if (instance == null || m_Wrapper.m_GamePlayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GamePlayActionsCallbackInterfaces.Add(instance);
            @MoveBlockLeft.started += instance.OnMoveBlockLeft;
            @MoveBlockLeft.performed += instance.OnMoveBlockLeft;
            @MoveBlockLeft.canceled += instance.OnMoveBlockLeft;
            @MoveBlockRight.started += instance.OnMoveBlockRight;
            @MoveBlockRight.performed += instance.OnMoveBlockRight;
            @MoveBlockRight.canceled += instance.OnMoveBlockRight;
            @RotateBlockLeft.started += instance.OnRotateBlockLeft;
            @RotateBlockLeft.performed += instance.OnRotateBlockLeft;
            @RotateBlockLeft.canceled += instance.OnRotateBlockLeft;
            @RotateBlockRight.started += instance.OnRotateBlockRight;
            @RotateBlockRight.performed += instance.OnRotateBlockRight;
            @RotateBlockRight.canceled += instance.OnRotateBlockRight;
            @DropBlockFast.started += instance.OnDropBlockFast;
            @DropBlockFast.performed += instance.OnDropBlockFast;
            @DropBlockFast.canceled += instance.OnDropBlockFast;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @PauseGame.started += instance.OnPauseGame;
            @PauseGame.performed += instance.OnPauseGame;
            @PauseGame.canceled += instance.OnPauseGame;
            @Cheat.started += instance.OnCheat;
            @Cheat.performed += instance.OnCheat;
            @Cheat.canceled += instance.OnCheat;
            @Yes.started += instance.OnYes;
            @Yes.performed += instance.OnYes;
            @Yes.canceled += instance.OnYes;
            @No.started += instance.OnNo;
            @No.performed += instance.OnNo;
            @No.canceled += instance.OnNo;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IGamePlayActions instance)
        {
            @MoveBlockLeft.started -= instance.OnMoveBlockLeft;
            @MoveBlockLeft.performed -= instance.OnMoveBlockLeft;
            @MoveBlockLeft.canceled -= instance.OnMoveBlockLeft;
            @MoveBlockRight.started -= instance.OnMoveBlockRight;
            @MoveBlockRight.performed -= instance.OnMoveBlockRight;
            @MoveBlockRight.canceled -= instance.OnMoveBlockRight;
            @RotateBlockLeft.started -= instance.OnRotateBlockLeft;
            @RotateBlockLeft.performed -= instance.OnRotateBlockLeft;
            @RotateBlockLeft.canceled -= instance.OnRotateBlockLeft;
            @RotateBlockRight.started -= instance.OnRotateBlockRight;
            @RotateBlockRight.performed -= instance.OnRotateBlockRight;
            @RotateBlockRight.canceled -= instance.OnRotateBlockRight;
            @DropBlockFast.started -= instance.OnDropBlockFast;
            @DropBlockFast.performed -= instance.OnDropBlockFast;
            @DropBlockFast.canceled -= instance.OnDropBlockFast;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @PauseGame.started -= instance.OnPauseGame;
            @PauseGame.performed -= instance.OnPauseGame;
            @PauseGame.canceled -= instance.OnPauseGame;
            @Cheat.started -= instance.OnCheat;
            @Cheat.performed -= instance.OnCheat;
            @Cheat.canceled -= instance.OnCheat;
            @Yes.started -= instance.OnYes;
            @Yes.performed -= instance.OnYes;
            @Yes.canceled -= instance.OnYes;
            @No.started -= instance.OnNo;
            @No.performed -= instance.OnNo;
            @No.canceled -= instance.OnNo;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IGamePlayActions instance)
        {
            if (m_Wrapper.m_GamePlayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGamePlayActions instance)
        {
            foreach (var item in m_Wrapper.m_GamePlayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GamePlayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GamePlayActions @GamePlay => new GamePlayActions(this);
    public interface IGamePlayActions
    {
        void OnMoveBlockLeft(InputAction.CallbackContext context);
        void OnMoveBlockRight(InputAction.CallbackContext context);
        void OnRotateBlockLeft(InputAction.CallbackContext context);
        void OnRotateBlockRight(InputAction.CallbackContext context);
        void OnDropBlockFast(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnPauseGame(InputAction.CallbackContext context);
        void OnCheat(InputAction.CallbackContext context);
        void OnYes(InputAction.CallbackContext context);
        void OnNo(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
    }
}
